name: Publish Frontend Docker image
run-name: ${{ github.actor }} pushed a frontend image to dockerhub
on: 
  push:
    branches:
      - main
  pull_request:
jobs:
    # Build-test-image:
    #   name: Build images for testing
    #   runs-on: ubuntu-latest
    #   permissions:
    #     packages: write
    #   steps: 
    #     - name: Set up Docker Buildx
    #       uses: docker/setup-buildx-action@v3
          
    #     # Login into docker hub
    #     - name: Login into Docker Hub
    #       uses: docker/login-action@v3
    #       with:
    #         username: ${{ secrets.DOCKERHUB_USERNAME }}
    #         password: ${{ secrets.DOCKERHUB_PASSWORD }}

    #     # Login into ghcr.io
    #     - name: Login into github container registry
    #       uses: docker/login-action@v3
    #       with:
    #         registry: ghcr.io
    #         username: ${{ github.actor }}
    #         password: ${{ secrets.GITHUB_TOKEN }}

    #     # Push image to ghcr.io
    #     - name: Build and Push to GHCR
    #       uses: docker/build-push-action@v5
    #       with:
    #         push: true
    #         tags: ghcr.io/VishalLokam/frontend:${{ github.run_id }}
    #         cache-from: type=gha
    #         cache-to: type=gha,mode=max
    #         platforms: linux/amd64




    Push-fontend-image-to-registry:
        name: Push frontend docker images to registry
        runs-on: ubuntu-latest
        permissions:
          pull-requests: write
          contents: read
          security-events: write
        steps:
            - name: Checkout the repo
              uses: actions/checkout@v4

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            
            - name: Login into Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_PASSWORD }}

            # Login into ghcr.io
            - name: Login into github container registry
              uses: docker/login-action@v3
              with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}
            
            # Push image to ghcr.io
            - name: Build and Push to GHCR
              uses: docker/build-push-action@v5
              with:
                push: true
                tags: ghcr.io/VishalLokam/frontend:${{ github.run_id }}
                cache-from: type=gha
                cache-to: type=gha,mode=max
                platforms: linux/amd64
                
            - name: Build and export to Docker engine
              uses: docker/build-push-action@v3
              with:
                context: frontend
                push: false
                load: true # Export to docker engine instead of registry
                tags: ${{ github.run_id }}
                cache-from: type=gha
                cache-to: type=gha,mode=max
                platforms: linux/amd64
            
            # CVE Scan non blocking
            - name: Run trivy on all CVEs(non blocking)
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: ${{ github.run_id }}
                exit-code: 0
                format: sarif
                output: 'trivy-results.sarif'


            # CVE Scan blocking
            # - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
            #   uses: aquasecurity/trivy-action@master
            #   with:
            #     image-ref: ${{ github.run_id }}
            #     exit-code: 1
            #     ignore-unfixed: true
            #     vuln-type: 'os,library'
            #     severity: 'HIGH,CRITICAL'
            #     format: 'sarif'
            #     output: 'trivy-results.sarif'
            
            # Upload trivy scan results to github security tab
            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                sarif_file: 'trivy-results.sarif'

            # for simple tests (npm test, etc.) just run a local image in docker
            - name: Unit Testing in Docker
              run: |
                docker container run --rm ${{ github.run_id }} echo "run test commands here"
            
            - name: Extract metadata (tags, labels) for final image build
              id: frontend-metadata
              uses: docker/metadata-action@v5
              with:
                images: vishallokam/three-tier-frontend
                flavor: |
                  latest=false
                tags: |
                  type=raw,value=07
                  # type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
                  # type=ref,event=pr
                  # type=ref,event=branch
                  # type=semver,pattern={{version}}

            - name: Build and push Docker image to docker hub
              uses: docker/build-push-action@v5
              with: 
                context: frontend
                push: true
                tags: ${{ steps.frontend-metadata.outputs.tags }}
                labels: ${{ steps.frontend-metadata.outputs.labels}}
                cache-from: type=gha
                cache-to: type=gha,mode=max
                platforms: linux/amd64,linux/arm64,linux/arm/v7

            - name: Find comment for image tags
              uses: peter-evans/find-comment@v2
              if: github.event_name == 'pull_request'
              id: fc
              with:
                issue-number: ${{ github.event.pull_request.number }}
                comment-author: 'github-actions[bot]'
                body-includes: Docker image tag(s) pushed
              
                # If PR, put image tags in the PR comments
            - name: Create or update comment for image tags
              uses: peter-evans/create-or-update-comment@v3
              if: github.event_name == 'pull_request'
              with:
                comment-id: ${{ steps.fc.outputs.comment-id }}
                issue-number: ${{ github.event.pull_request.number }}
                body: |
                  Docker image tag(s) pushed:
                  ```text
                  ${{ steps.frontend-metadata.outputs.tags }}
                  ```
        
                  Labels added to images:
                  ```text
                  ${{ steps.frontend-metadata.outputs.labels }}
                  ```
                edit-mode: replace
