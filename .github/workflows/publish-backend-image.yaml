name: Publish Backend Docker image
run-name: ${{ github.actor }} pushed a backend image to dockerhub
on: 
  push:
    branches:
      - main
  pull_request:
jobs:
    # Build test image
    build-test-image:
      name: Build images for testing
      runs-on: ubuntu-latest
      permissions:
        packages: write
        contents: read
      steps: 
        - name: Checkout the repo
          uses: actions/checkout@v4

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          
        # Login into docker hub
        - name: Login into Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        # Login into ghcr.io
        - name: Login into github container registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        # Push image to ghcr.io
        - name: Build and Push to GHCR
          uses: docker/build-push-action@v5
          with:
            context: backend
            push: true
            tags: ghcr.io/vishallokam/backend:${{ github.run_id }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
            platforms: linux/amd64

    # Run unit tests on the test image
    unit-tests:
      name: Unit tests in Docker
      runs-on: ubuntu-latest
      needs: [build-test-image]

      permissions:
        packages: read

      steps:
        - name: Login to ghcr.io registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Unit testing in Docker
          run: docker container run --rm ghcr.io/vishallokam/backend:"$GITHUB_RUN_ID" echo "run test commands here"
    
    # CVE scanning using Trivy
    CVE-scan-image:
      name: Scan Image using Trivy
      runs-on: ubuntu-latest
      needs: [build-test-image]
      permissions:
        contents: read
        packages: read
        security-events: write

      steps:
        - name: Checkout the repo
          uses: actions/checkout@v4

        - name: Login into ghcr.io to fetch image
          run: docker image pull ghcr.io/vishallokam/backend:"$GITHUB_RUN_ID"
        
        - name: Run Trivy scanner
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: ghcr.io/vishallokam/backend:${{ github.run_id }}
            format: table
            exit-code: 0

    # Build final image
    build-final-image:
      name: Build Final Image
      runs-on: ubuntu-latest
      needs: [build-test-image,unit-tests,CVE-scan-image]
      permissions:
        packages: write
        pull-requests: write
      steps:
        - name: Checkout repo code
          uses: actions/checkout@v4

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3

        - name: Setup buildx
          uses: docker/setup-buildx-action@v3

        - name: Login docker hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: Login ghcr.io
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        # Docker metadata
        - name: Docker metadata for final image build
          id: docker_metadata
          uses: docker/metadata-action@v5
          with:
            images: vishallokam/three-tier-backend,ghcr.io/vishallokam/backend
            flavor: |
              latest=false
            tags: |
              type=raw,value=99

        # Docker build and push image to GHCR and Docker hub
        - name: Build image and push to GHCR and docker hub
          uses: docker/build-push-action@v5
          with:
            context: backend
            push: true
            tags: ${{ steps.docker_metadata.outputs.tags }}
            labels: ${{ steps.docker_metadata.outputs.tags }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
            platforms: linux/amd64,linux/arm64,linux/arm/v7